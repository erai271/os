grammar <- sp (enum_decl / struct_decl / func_decl)* !.

enum_item <- ident sp ('=' sp expr)?
enum_decl <- enum sp '{' sp (enum_item (',' sp enum_item)*)? (',' sp)? '}' sp

member_decl <- ident sp ':' sp type ';' sp
struct_decl <- struct sp ident sp '{' sp member_decl* '}' sp

func_decl <- ident sp func_type (';' sp / compound_stmt)

type <- ident sp / byte sp / int sp / void sp
      / func sp func_type / ptr_type / '(' sp type ')' sp

ptr_type <- '*' sp type

arg_decl <- ident sp ':' sp type
func_type <- '(' sp ( arg_decl (',' sp arg_decl)* )?  ( ',' sp )?  ')' sp
             (':' sp type)?

stmt <- if_stmt / loop_stmt / break_stmt / continue_stmt
      / return_stmt / var_stmt / label_stmt / goto_stmt
      / assign_stmt / expr_stmt / empty_stmt / compound_stmt

elif_stmt <- else sp if sp expr compound_stmt
else_stmt <- else sp compound_stmt
if_stmt <- if sp expr compound_stmt elif_stmt* else_stmt?

loop_stmt <- loop sp compound_stmt sp

break_stmt <- break sp ';' sp

continue_stmt <- continue sp ';' sp

return_stmt <- return sp expr? sp ';' sp

var_stmt <- var sp ident sp ':' sp type ';' sp

label_stmt <- ':' sp ident sp ';' sp

goto_stmt <- goto sp ident sp ';' sp

assign_stmt <- unary_expr '=' sp expr ';' sp

expr_stmt <- expr ';' sp

empty_stmt <- ';' sp

compound_stmt <- '{' sp stmt* '}' sp

expr <- bool_expr

band_op <- '&&'
bor_op <- '||'
bool_expr <- comp_expr ((band_op / bor_op) sp comp_expr)*

le_op <- '<='
ge_op <- '>='
lt_op <- '<' !'=' !'<'
gt_op <- '>' !'=' !'>'
eq_op <- '=='
ne_op <- '!='
comp_expr <- add_expr ((le_op / ge_op / lt_op / gt_op / eq_op / ne_op) sp add_expr)?

add_op <- '+'
sub_op <- '-'
or_op <- '|' !'|'
xor_op <- '^'
add_expr <- mul_expr ((add_op / sub_op / or_op / xor_op) sp mul_expr)*

mul_op <- '*'
div_op <- '/' !'/'
mod_op <- '%'
and_op <- '&' !'&'
mul_expr <- shift_expr ((mul_op / div_op / mod_op / and_op) sp shift_expr)*

lsh_op <- '<<'
rsh_op <- '>>'
shift_expr <- unary_expr ((lsh_op / rsh_op) sp unary_expr)*

ref_op <- '&' !'&'
deref_op <- '*'
pos_op <- '+'
neg_op <- '-'
not_op <- '~'
bnot_op <- '!' !'='
unary_expr <- ((ref_op / deref_op / pos_op / neg_op / not_op / bnot_op) sp)* post_expr

index_expr <- '[' sp expr ']' sp
call_expr <- '(' sp ( expr (',' sp expr)* )? (',' sp)? ')' sp
member_expr <-  '.' sp ident sp
cast_expr <- ':' sp type
post_expr <- primary (index_expr / call_expr / member_expr / cast_expr)*

primary <- ident sp / hex sp / dec sp / str sp / char sp
         / sizeof_expr / '(' sp expr ')' sp

sizeof_expr <- sizeof sp '(' sp expr ')' sp

hex <- '0x'[0-9a-fA-F]+
dec <- [0-9]+
str <- ["] ([\\] . / !["] .)* ["]
char <- ['] ([\\] . / !['] .)+ [']

reserved <- return / break / sizeof / if / else / loop / continue / goto
          / var / enum / struct / byte / int / void / func

return <- 'return' ![a-zA-Z0-9_]
break <- 'break' ![a-zA-Z0-9_]
sizeof <- 'sizeof' ![a-zA-Z0-9_]
if <- 'if' ![a-zA-Z0-9_]
else <- 'else' ![a-zA-Z0-9_]
loop <- 'loop' ![a-zA-Z0-9_]
continue <- 'continue' ![a-zA-Z0-9_]
goto <- 'goto' ![a-zA-Z0-9_]
var <- 'var' ![a-zA-Z0-9_]
enum <- 'enum' ![a-zA-Z0-9_]
struct <- 'struct' ![a-zA-Z0-9_]
byte <- 'byte' ![a-zA-Z0-9_]
int <- 'int' ![a-zA-Z0-9_]
void <- 'void' ![a-zA-Z0-9_]
func <- 'func' ![a-zA-Z0-9_]

ident <- !reserved [a-zA-Z_][a-zA-Z0-9_]*

sp <- ( [ \r\n\t] / '//' (![\r\n] .)* )*
