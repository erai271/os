grammar <- sp (enum_decl / struct_decl / func_decl)* !.

enum_def <- ident sp ('=' sp expr)?
enum_decl <- enum sp '{' sp (enum_def (',' sp enum_def)*)? (',' sp)? '}' sp

struct_def <- ident sp ':' sp type ';' sp
struct_decl <- struct sp ident sp '{' sp struct_def* '}' sp

func_decl <- ident sp func_type (';' / '{' sp stmt* '}') sp

type <- ident sp
      / byte sp
      / int sp
      / void sp
      / func sp func_type
      / '*' sp type
      / '(' sp type ')' sp

func_type <- '(' sp
             ( ident sp ':' sp type (',' sp ident sp ':' sp type)* )?
             ( ',' sp )?
             ')' sp (':' sp type)?

stmt <- if_stmt
      / loop_stmt
      / break_stmt
      / continue_stmt
      / return_stmt
      / var_stmt
      / label_stmt
      / goto_stmt
      / assign_stmt
      / expr_stmt
      / empty_stmt
      / compound_stmt

if_stmt <- if sp expr '{' sp stmt* '}' sp
           (else sp if sp expr '{' sp stmt* '}' sp)*
           (else sp '{' sp stmt* '}' sp)?

loop_stmt <- loop sp '{' sp stmt* '}' sp

break_stmt <- break sp ';' sp

continue_stmt <- continue sp ';' sp

return_stmt <- return sp expr? sp ';' sp

var_stmt <- var sp ident sp ':' sp type ';' sp

label_stmt <- ':' sp ident sp ';' sp

goto_stmt <- goto sp ident sp ';' sp

assign_stmt <- unary_expr '=' sp expr ';' sp

expr_stmt <- expr ';' sp

empty_stmt <- ';' sp

compound_stmt <- '{' sp stmt* '}' sp

expr <- bool_expr

bool_expr <- comp_expr (('&&' / '||') sp comp_expr)*

comp_expr <- add_expr (('<=' / '>=' / '<' / '>' / '==' / '!=') sp add_expr)?

add_expr <- mul_expr (('+' / '-' / '|' !'|' / '^') sp add_expr)*

mul_expr <- shift_expr (('*' / '/' / '%' / '&' !'&') sp mul_expr)*

shift_expr <- unary_expr (('<<' / '>>') sp shift_expr)*

unary_expr <- (('&' !'&' / '*' / '+' / '-' / '~' / '!') sp)* post_expr

post_expr <- primary ( '[' sp expr ']' sp
                     / '(' sp ( expr (',' sp expr)* )? (',' sp)? ')' sp
                     / '.' sp ident sp
                     / ':' sp type )*

primary <- ident sp
         / hexadecimal sp
	 / decimal sp
	 / string sp
	 / character sp
         / '(' sp expr ')' sp
         / sizeof sp '(' sp expr ')' sp

hexadecimal <- '0x'[0-9a-fA-F]+
decimal <- [0-9]+

string <- ["] ([\\] . / !["] .)* ["]
character <- ['] ([\\] . / !['] .) [']

reserved <- return
          / break
          / sizeof
          / if
          / else
          / loop
          / continue
          / goto
          / var
          / enum
          / struct
          / byte
          / int
          / void
	  / func

return <- 'return' ![a-zA-Z0-9_]
break <- 'break' ![a-zA-Z0-9_]
sizeof <- 'sizeof' ![a-zA-Z0-9_]
if <- 'if' ![a-zA-Z0-9_]
else <- 'else' ![a-zA-Z0-9_]
loop <- 'loop' ![a-zA-Z0-9_]
continue <- 'continue' ![a-zA-Z0-9_]
goto <- 'goto' ![a-zA-Z0-9_]
var <- 'var' ![a-zA-Z0-9_]
enum <- 'enum' ![a-zA-Z0-9_]
struct <- 'struct' ![a-zA-Z0-9_]
byte <- 'byte' ![a-zA-Z0-9_]
int <- 'int' ![a-zA-Z0-9_]
void <- 'void' ![a-zA-Z0-9_]
func <- 'func' ![a-zA-Z0-9_]

ident <- !reserved [a-zA-Z_][a-zA-Z0-9_]*

sp <- ( [ \r\n\t] / '//' (![\r\n] .)* )*
